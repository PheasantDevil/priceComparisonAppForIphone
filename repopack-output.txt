This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-14T09:15:43.980Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  apple_scraper_for_rudea.py
  apple_scraper.py
templates/
  index.html
.gitignore
.python-version
.render.yaml
app.py
Procfile
README.md
renovate.json
requirements.txt

================================================================
Repository Files
================================================================

================
File: src/apple_scraper_for_rudea.py
================
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

# 買取ルデアのiPhone 16買取価格ページURL
url_kaitori = 'https://kaitori-rudeya.com/category/detail/183'

def get_kaitori_prices(url):
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.get(url)

    driver.implicitly_wait(10)

    items = driver.find_elements(By.CSS_SELECTOR, '.tr')
    product_details = []
    error_log = []

    for item in items:
        model_name = "不明"
        price_text = "不明"

        # モデル名を取得
        try:
            model_element = item.find_element(By.CSS_SELECTOR, '.ttl h2')
            model_name = model_element.text.strip()
        except Exception as e:
            error_log.append(f"モデル名取得エラー: {e} - 行にモデル名が存在しませんでした。")

        # 買取価格を取得
        try:
            price_element = item.find_element(By.CSS_SELECTOR, '.td.td2 .td2wrap')
            price_text = price_element.text.strip()
        except Exception as e:
            error_log.append(f"買取価格取得エラー: {e} - 行に買取価格が存在しませんでした。")

        if model_name and price_text and '円' in price_text:
            product_details.append({
                "model": model_name,
                "price": price_text
            })

    driver.quit()
    return product_details, error_log

# 買取ルデアの価格取得
iphone16_kaitori_prices, error_log = get_kaitori_prices(url_kaitori)

# 結果を出力
print("買取ルデアのiPhone 16の買取価格:")
for detail in iphone16_kaitori_prices:
    print(f"モデル: {detail['model']} | 買取価格: {detail['price']}")

# エラー情報を表示
if error_log:
    print("\nエラー情報:")
    for error in error_log:
        print(error)

================
File: src/apple_scraper.py
================
import requests
from bs4 import BeautifulSoup

# iPhone 16, iPhone 16 Plusの購入ページURL
url_iphone16 = 'https://www.apple.com/jp/shop/buy-iphone/iphone-16'
# iPhone 16 Pro, iPhone 16 Pro Maxの購入ページURL
url_iphone16_pro = 'https://www.apple.com/jp/shop/buy-iphone/iphone-16-pro'

# ページから価格情報を取得する関数
def get_prices(url):
    # ページを取得
    response = requests.get(url)
    
    # レスポンスの内容を確認
    print(response.text)  # ここでHTMLの内容を表示
    
    # BeautifulSoupでHTML解析
    soup = BeautifulSoup(response.text, 'html.parser')

    # 価格情報を取得するためのセレクタ
    prices = soup.select('span.price-point.price-point-fullPrice > span.nowrap')

    # 取得した価格情報をリストに格納
    price_list = [price.get_text() for price in prices]
    return price_list

# iPhone 16シリーズの価格取得
print("iPhone 16シリーズの価格:")
iphone16_prices = get_prices(url_iphone16)
for price in iphone16_prices:
    print(price)

# iPhone 16 Proシリーズの価格取得
print("\niPhone 16 Proシリーズの価格:")
iphone16_pro_prices = get_prices(url_iphone16_pro)
for price in iphone16_pro_prices:
    print(price)

================
File: templates/index.html
================
<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>iPhone買取価格比較</title>
    <style>
      /* ローディングスピナーのスタイル */
      .loader {
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border-top: 16px solid #3498db;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
        margin: 20px auto;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      #priceTable {
        display: none;
      }
    </style>
    <script>
      // ページが読み込まれた時に価格データを取得する
      document.addEventListener('DOMContentLoaded', function () {
        // ローディング表示
        document.getElementById('loading').style.display = 'block';
        document.getElementById('priceTable').style.display = 'none';

        // データを非同期で取得
        fetch('/get_prices')
          .then(response => response.json())
          .then(data => {
            // テーブルにデータを表示
            const table = document.getElementById('priceTableBody');
            table.innerHTML = ''; // 既存の内容をクリア
            data.forEach(iphone => {
              const row = `<tr>
                                        <td>${iphone.model}</td>
                                        <td>${iphone.price}</td>
                                     </tr>`;
              table.innerHTML += row;
            });

            // ローディングを非表示にしてテーブルを表示
            document.getElementById('loading').style.display = 'none';
            document.getElementById('priceTable').style.display = 'block';
          });
      });
    </script>
  </head>
  <body>
    <h1>iPhone 16シリーズ 買取価格比較</h1>

    <!-- ローディング中の表示 -->
    <div id="loading">
      <div class="loader"></div>
      <p>Loading（読み込み中）...</p>
    </div>

    <!-- 価格テーブル -->
    <table id="priceTable" border="1">
      <tr>
        <th>モデル</th>
        <th>買取価格</th>
      </tr>
      <tbody id="priceTableBody"></tbody>
    </table>
  </body>
</html>

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

================
File: .python-version
================
3.11.9

================
File: .render.yaml
================
# デプロイの設定を詳細に指定するためのファイルで、以下のような情報を設定可能
# ・ サービスの種類（web service、background jobなど）
# ・ 環境変数
# ・ ビルドコマンドやスタートコマンド
# ・ 自動デプロイの有無など

version: '1'
services:
  - type: web
    name: priceComparisonAppForIphone
    plan: free
    runtime: python
    buildCommand: |
      pip install -r requirements.txt
      playwright install chromium
      playwright install-deps
    startCommand: 'gunicorn app:app'

================
File: app.py
================
import os

from flask import Flask, jsonify, render_template
from playwright.sync_api import sync_playwright


# Playwrightのブラウザがインストールされているか確認
def check_playwright_installation():
    try:
        with sync_playwright() as p:
            p.chromium.launch()  # これでブラウザが起動できればインストール済み
    except Exception as e:
        print("Playwrightのブラウザがインストールされていません:", str(e))
        return False
    return True

if not check_playwright_installation():
    print("ブラウザを手動でインストールしてください。")

app = Flask(__name__)

# スクレイピング関数の定義
def get_kaitori_prices(url):
    product_details = []

    with sync_playwright() as p:
        # システムにインストールされたChromiumを使用
        browser = p.chromium.launch(chromium_sandbox=False)
        # セキュリティ上の理由から、chromium_sandbox=Falseの使用は本番環境では推奨されません。可能であれば、適切なサンドボックス設定を行ってください。
        page = browser.new_page()
        page.goto(url)
        page.wait_for_selector('.tr')  # 適切なセレクタを待つ

        items = page.query_selector_all('.tr')

        for item in items:
            model_name = "不明"
            price_text = "不明"

            try:
                model_element = item.query_selector('.ttl h2')
                model_name = model_element.inner_text().strip()
            except Exception as e:
                model_name = "エラー: モデル名取得失敗"

            try:
                price_element = item.query_selector('.td.td2 .td2wrap')
                price_text = price_element.inner_text().strip()
            except Exception as e:
                price_text = "エラー: 買取価格取得失敗"

            if model_name and price_text and '円' in price_text:
                product_details.append({
                    "model": model_name,
                    "price": price_text
                })

        browser.close()
    return product_details

# ルートページ（HTML表示用）
@app.route('/')
def home():
    return render_template('index.html')

# データ取得用APIエンドポイント
@app.route('/get_prices')
def get_prices():
    try:
        url_kaitori = 'https://kaitori-rudeya.com/category/detail/183'
        iphone_prices = get_kaitori_prices(url_kaitori)
        return jsonify(iphone_prices)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)

================
File: Procfile
================
web: gunicorn app:app

================
File: README.md
================
# priceComparisonAppForIphone

================
File: renovate.json
================
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ]
}

================
File: requirements.txt
================
attrs==24.2.0
beautifulsoup4==4.12.3
blinker==1.8.2
certifi==2024.8.30
charset-normalizer==3.3.2
click==8.1.7
exceptiongroup==1.2.2
Flask==3.0.3
greenlet==3.0.3
gunicorn==23.0.0
h11==0.14.0
idna==3.10
importlib_metadata==8.5.0
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
outcome==1.3.0.post0
packaging==24.1
playwright==1.47.0
pyee==12.0.0
PySocks==1.7.1
python-dotenv==1.0.1
requests==2.32.3
selenium==4.25.0
sniffio==1.3.1
sortedcontainers==2.4.0
soupsieve==2.6
trio==0.26.2
trio-websocket==0.11.1
typing_extensions==4.12.2
urllib3==2.2.3
webdriver-manager==4.0.2
websocket-client==1.8.0
Werkzeug==3.0.4
wsproto==1.2.0
zipp==3.20.2
