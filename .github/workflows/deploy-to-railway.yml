name: Deploy to Railway

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能

jobs:
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli@latest
        railway --version
        echo "Railway CLI installed successfully"

    - name: Build and copy frontend
      run: |
        echo "Building Next.js frontend and copying to templates..."
        chmod +x backend/build-and-copy.sh
        ./backend/build-and-copy.sh
        
        echo "✅ Frontend build and copy completed"
        echo "📊 Templates directory contents:"
        ls -la templates/ || echo "Templates directory not found"

    - name: Setup Railway authentication
      run: |
        echo "Setting up Railway authentication..."
        export RAILWAY_TOKEN="${{ secrets.RAILWAY_TOKEN }}"
        
        # 環境変数を確実に設定
        echo "RAILWAY_TOKEN=$RAILWAY_TOKEN" >> $GITHUB_ENV
        
        echo "✅ Railway authentication setup completed"

    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "Deploying to Railway with Service ID: $RAILWAY_SERVICE_ID"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        railway up --detach --service $RAILWAY_SERVICE_ID || {
          echo "❌ Deployment failed"
          echo "Checking Railway logs..."
          railway logs --service $RAILWAY_SERVICE_ID || echo "Could not retrieve logs"
          exit 1
        }
        echo "✅ Deployment completed successfully!"

    - name: Get deployment URL
      id: get-url
      run: |
        echo "Getting deployment URL..."
        URL=$(railway status --service $RAILWAY_SERVICE_ID | grep -o 'https://[^[:space:]]*' | head -1 || \
              echo "https://price-comparison-app-production.up.railway.app")
        echo "deployment_url=$URL" >> $GITHUB_OUTPUT
        echo "Deployment URL: $URL"

    - name: Health check
      run: |
        echo "Performing health check..."
        sleep 30
        URL="${{ steps.get-url.outputs.deployment_url }}"
        echo "Checking health at: $URL/health"
        curl -f "$URL/health" || echo "Health check failed - this is normal for first deployment"

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 このPRがマージされると自動的にRailwayにデプロイされます！
              
              **プラットフォーム**: Railway.app
              **無料枠**: 月500時間まで無料
              **安定性**: 高（App Engine Standardより安定）
              **デプロイURL**: ${{ steps.get-url.outputs.deployment_url }}
              
              **修正内容**:
              - Dockerfileの最適化（マルチステージビルド）
              - Next.js 15対応の静的エクスポート
              - 環境変数設定の改善
              - エラーハンドリングの強化`
            });
            console.log('PRコメントを投稿しました');
          } catch (error) {
            console.log('PRコメントの投稿に失敗しました:', error.message);
          }

    - name: Get Railway logs
      if: failure()
      run: |
        echo "Getting Railway logs after failure..."
        railway logs --service $RAILWAY_SERVICE_ID || echo "Could not retrieve logs"

    - name: Get Railway status
      if: failure()
      run: |
        echo "Getting Railway status after failure..."
        railway status --service $RAILWAY_SERVICE_ID || echo "Could not retrieve status"
