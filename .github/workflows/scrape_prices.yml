name: Scrape and Store iPhone Prices

on:
  push:
    branches:
      - 'ci/bug-fix-scrape-and-store'
    schedule:
    - cron: '0 3 * * *'  # 日本時間12時 (UTC+9)
    - cron: '0 11 * * *' # 日本時間20時 (UTC+9)
  workflow_dispatch:  # 手動実行用

env:
  AWS_REGION: ap-northeast-1
  DYNAMODB_TABLE: price_history
  PYTHON_VERSION: '3.9'

jobs:
  scrape-and-store:
    name: Scrape and Store Prices
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install boto3 playwright
          playwright install chromium

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Run scraper
        run: |
          cd src
          python -c "
          import json
          from apple_scraper_for_rudea import get_kaitori_prices
          from datetime import datetime
          import boto3

          # スクレイピング実行
          prices = get_kaitori_prices()
          
          # DynamoDBクライアントの初期化
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('${{ env.DYNAMODB_TABLE }}')
          
          # 現在のタイムスタンプ
          timestamp = int(datetime.now().timestamp())
          
          # データの保存
          for series, capacities in prices.items():
              for capacity, details in capacities.items():
                  for color, price_info in details['colors'].items():
                      item = {
                          'id': f'{series}-{capacity}-{color}',
                          'timestamp': timestamp,
                          'series': series,
                          'capacity': capacity,
                          'color': color,
                          'price': price_info['price_value'],
                          'price_text': price_info['price_text']
                      }
                      table.put_item(Item=item)
          
          print('Data successfully stored in DynamoDB')
          "

      - name: Verify data
        run: |
          aws dynamodb scan \
            --table-name ${{ env.DYNAMODB_TABLE }} \
            --filter-expression "timestamp = :ts" \
            --expression-attribute-values '{":ts": {"N": "'$(date +%s)'"}}' \
            --query "Count" \
            --output text

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ スクレイピングが失敗しました\n\n- 実行ID: ${{ github.run_id }}\n- 時刻: ${{ github.event.schedule }}`
            }) 
