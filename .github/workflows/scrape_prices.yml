name: Scrape iPhone Prices and Sync to Firestore

on:
  schedule:
    - cron: '0 10 * * *'  # 毎日10時に実行
    - cron: '0 22 * * *'  # 毎日22時に実行
  workflow_dispatch:  # 手動実行も可能

env:
  PYTHONPATH: ${{ github.workspace }}
  PYTHONUNBUFFERED: 1  # Pythonの出力バッファリングを無効化

jobs:
  scrape-and-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # タイムアウト設定

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2t64 libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libpango-1.0-0 libcairo2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install playwright
          playwright install chromium

      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create service account key file
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > key.json
          echo "Service account key file created"

      - name: Set up Firestore permissions
        run: |
          echo "Setting up Firestore permissions..."
          # サービスアカウントにFirestore権限を付与
          gcloud projects add-iam-policy-binding price-comparison-app-463007 \
            --member="serviceAccount:price-comparison-app@price-comparison-app-463007.iam.gserviceaccount.com" \
            --role="roles/datastore.user"
          
          # Firestoreセキュリティルールを確認
          echo "Current Firestore rules:"
          gcloud firestore rules list --project=price-comparison-app-463007
          
          echo "Firestore permissions setup completed"

      - name: Deploy Firestore security rules
        run: |
          echo "Deploying Firestore security rules..."
          gcloud firestore rules deploy functions/firestore.rules \
            --project=price-comparison-app-463007
          echo "Firestore security rules deployed"

      - name: Verify Firestore rules deployment
        run: |
          echo "Verifying Firestore rules deployment..."
          # ルールのデプロイ完了を待機
          sleep 30
          
          # 現在のルールを確認
          echo "Current Firestore rules:"
          gcloud firestore rules list --project=price-comparison-app-463007
          
          # テスト用のドキュメントを作成して権限を確認
          echo "Testing Firestore write permissions..."
          python test_firestore_permissions.py
          echo "Firestore permissions verified successfully"

      - name: Run price scraping
        id: scrape
        continue-on-error: true  # エラーが発生しても続行
        run: |
          echo "Starting price scraping..."
          echo "Current directory: $(pwd)"
          echo "Files in scripts directory:"
          ls -la scripts/
          echo "Config file exists: $(test -f config/config.production.yaml && echo 'Yes' || echo 'No')"
          echo "Key file exists: $(test -f key.json && echo 'Yes' || echo 'No')"
          python scripts/scrape_prices.py
          echo "Price scraping completed with exit code: $?"

      - name: Sync to Firestore
        id: sync
        continue-on-error: true  # エラーが発生しても続行
        run: |
          echo "Starting Firestore sync..."
          # key.jsonファイルが存在することを確認
          if [ ! -f key.json ]; then
            echo '${{ secrets.GCP_SA_KEY }}' > key.json
            echo "Service account key file recreated for sync step"
          fi
          python scripts/sync_cloud_storage_to_firestore.py
          echo "Firestore sync completed with exit code: $?"

      - name: Cleanup old Cloud Storage files
        id: cleanup
        continue-on-error: true  # エラーが発生しても続行
        run: |
          echo "Starting Cloud Storage cleanup..."
          # key.jsonファイルが存在することを確認
          if [ ! -f key.json ]; then
            echo '${{ secrets.GCP_SA_KEY }}' > key.json
            echo "Service account key file recreated for cleanup step"
          fi
          python scripts/cleanup_cloud_storage.py
          echo "Cloud Storage cleanup completed with exit code: $?"

      - name: Send error notification
        if: steps.scrape.outcome == 'failure' || steps.sync.outcome == 'failure' || steps.cleanup.outcome == 'failure'
        run: |
          echo "Scrape step outcome: ${{ steps.scrape.outcome }}"
          echo "Sync step outcome: ${{ steps.sync.outcome }}"
          echo "Cleanup step outcome: ${{ steps.cleanup.outcome }}"
          # 必要に応じて通知処理を追加

      - name: Cleanup sensitive files
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f key.json
          echo "key.json file removed" 
