# .github/workflows/terraform.yml
name: Terraform Deploy

on:
  push:
    paths:
      - 'terraform/**'
      - 'src/**'
      - 'lambda/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    paths:
      - 'terraform/**'
      - 'src/**'
      - 'lambda/**'
      - '.github/workflows/terraform.yml'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-1
  TF_WORKSPACE: default
  PYTHON_VERSION: '3.9'

jobs:
  prepare:
    name: Prepare Lambda Functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r terraform/requirements.txt

      - name: Package Lambda functions
        run: |
          cd terraform/scripts
          python package_lambda.py

      - name: Upload Lambda packages
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            terraform/*.zip
            !terraform/terraform.*.zip

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r terraform/requirements.txt
          pip install pytest pytest-cov python-dotenv

      - name: Run Python tests
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing --tb=short

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety
          curl -L -o tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-results.json -c .bandit || true

      - name: Run dependency security check
        run: |
          safety check -r terraform/requirements.txt --json > safety-results.json || true

      - name: Run Terraform security scan
        run: |
          tfsec terraform/ --format json --out tfsec-results.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            tfsec-results.json

  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Lambda packages
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Initialize Terraform
        working-directory: terraform
        run: |
          # Remove any existing .terraform directory and .terraform.lock.hcl
          rm -rf .terraform .terraform.lock.hcl
          terraform init -input=false

      - name: Validate Terraform configuration
        working-directory: terraform
        run: |
          terraform validate

      - name: Check Terraform formatting
        working-directory: terraform
        run: |
          terraform fmt -check -recursive -diff

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Lambda packages
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        working-directory: terraform
        run: |
          terraform init -input=false

      - name: Handle existing resources
        working-directory: terraform
        run: |
          # Import existing DynamoDB tables if they exist
          terraform import aws_dynamodb_table.iphone_prices iphone_prices || true
          terraform import aws_dynamodb_table.official_prices official_prices || true
          terraform import aws_dynamodb_table.price_history price_history || true
          terraform import aws_dynamodb_table.price_predictions price_predictions || true
          
          # Import existing IAM roles if they exist
          terraform import aws_iam_role.lambda_role get_prices_lambda_role || true
          terraform import aws_iam_openid_connect_provider.github_actions https://token.actions.githubusercontent.com || true

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -input=false \
            -var="skip_organization_policy=true" \
            -var="evaluation_periods=120" \
            -var="period=300" \
            -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, security, validate, plan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Lambda packages
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        working-directory: terraform
        run: |
          terraform init -input=false

      - name: Apply Terraform changes
        working-directory: terraform
        run: |
          terraform apply -auto-approve tfplan

      - name: Verify deployment
        working-directory: terraform
        run: |
          # Invoke deployment verification Lambda
          aws lambda invoke \
            --function-name deployment-verification \
            --payload '{}' \
            response.json
          cat response.json

      - name: Run smoke tests
        working-directory: terraform
        run: |
          # Invoke smoke test Lambda
          aws lambda invoke \
            --function-name smoke-test \
            --payload '{}' \
            response.json
          cat response.json

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            lambda-packages
            tfplan
            security-scan-results
