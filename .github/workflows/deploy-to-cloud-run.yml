name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: price-comparison-app

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -c "import app; print('App imports successfully')"

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        credentials: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCP
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --service-account=price-comparison-app@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
          --set-secrets=GOOGLE_APPLICATION_CREDENTIALS_JSON=gcp-credentials:latest \
          --set-env-vars=BUCKET_NAME=price-comparison-app-data-${{ secrets.GCP_PROJECT_ID }},APP_ENV=production \
          --memory 512Mi \
          --cpu 1 \
          --timeout 300 \
          --concurrency 80 \
          --max-instances 10

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format="value(status.url)")
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        sleep 30
        curl -f ${{ steps.get-url.outputs.service_url }}/health

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 このPRがマージされると自動的にCloud Runにデプロイされます！
              
              **デプロイ先**: ${{ steps.get-url.outputs.service_url }}
              **リージョン**: ${{ env.REGION }}
              **サービス名**: ${{ env.SERVICE_NAME }}`
            });
            console.log('PRコメントを投稿しました');
          } catch (error) {
            console.log('PRコメントの投稿に失敗しました:', error.message);
          } 
